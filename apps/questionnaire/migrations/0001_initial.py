# Generated by Django 4.2.1 on 2023-08-29 08:10

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import utils.common


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='ChoiceCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Integer (i.e., whole number) input.'), (2, 'Decimal input.'), (3, 'Free text response.'), (4, 'Multiple choice question; only one answer can be selected.'), (5, 'Multiple choice question; multiple answers can be selected.'), (6, 'Rank question; order a list.'), (7, 'Range input (including rating)'), (10, 'Display a note on the screen, takes no input. Shorthand for type=text with readonly=true.'), (14, 'Date input.'), (15, 'Time input.'), (16, 'Accepts a date and a time input.'), (17, 'Take a picture or upload an image file.'), (18, 'Take an audio recording or upload an audio file.'), (20, 'Take a video recording or upload a video file.'), (21, 'Generic file input (txt, pdf, xls, xlsx, doc, docx, rtf, zip)'), (22, 'Scan a barcode, requires the barcode scanner app to be installed.'), (24, 'Acknowledge prompt that sets value to "OK" if selected.')])),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('name', models.CharField(max_length=255, validators=[utils.common.validate_xlsform_name])),
                ('label', models.TextField()),
                ('hint', models.TextField(blank=True)),
                ('default', models.TextField(blank=True)),
                ('guidance_hint', models.TextField(blank=True)),
                ('trigger', models.CharField(blank=True, max_length=255)),
                ('readonly', models.CharField(blank=True, max_length=255)),
                ('required', models.BooleanField(default=False)),
                ('required_message', models.CharField(blank=True, max_length=255)),
                ('relevant', models.CharField(blank=True, max_length=255)),
                ('constraint', models.CharField(blank=True, max_length=255)),
                ('appearance', models.CharField(blank=True, max_length=255)),
                ('calculation', models.CharField(blank=True, max_length=255)),
                ('parameters', models.CharField(blank=True, max_length=255)),
                ('choice_filter', models.CharField(blank=True, max_length=255)),
                ('image', models.CharField(blank=True, max_length=255)),
                ('video', models.CharField(blank=True, max_length=255)),
                ('is_or_other', models.BooleanField(default=False)),
                ('or_other_label', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('leaf_group__order', 'order'),
            },
        ),
        migrations.CreateModel(
            name='QuestionLeafGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Matrix 1D'), (2, 'Matrix 2D')])),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('category_1', models.PositiveSmallIntegerField(choices=[(101, '1. Context'), (102, '2. Event/Shock'), (103, '3. Displacement'), (104, '4. Casualties'), (105, '5. Information And Communication'), (106, '6. Humanitarian Access'), (201, '7. Impact'), (202, '8. Humanitarian Conditions'), (203, '9. At Risk'), (204, '10. Priorities'), (205, '11. Capacities Response')])),
                ('category_2', models.PositiveSmallIntegerField(choices=[(1001, 'Politics'), (1002, 'Demography'), (1003, 'Socio Cultural'), (1004, 'Environment'), (1005, 'Security And Stability'), (1006, 'Economics'), (1101, 'Characteristics'), (1102, 'Drivers And Aggravating Factors'), (1103, 'Mitigating Factors'), (1104, 'Hazards And Threats'), (1201, 'Characteristics'), (1202, 'Push Factors'), (1203, 'Pull Factors'), (1204, 'Intentions'), (1205, 'Local Integration'), (1301, 'Dead'), (1302, 'Injured'), (1303, 'Missing'), (1401, 'Source And Means'), (1402, 'Challendges And Barriers'), (1403, 'Knowledge And Info Gaps (Humanitarian)'), (1404, 'Knowledge And Info Gaps POPULATION)'), (1501, 'Population To Relief'), (1502, 'Relief To Population'), (1503, 'Physical And Security'), (1504, 'Number Of People Facing Hum. Access Constraints'), (2001, 'Drivers'), (2002, 'Impact On People'), (2003, 'Impact On Systems Services Network'), (2101, 'Living Standards'), (2102, 'Coping Mechanisms'), (2103, 'Physical And Mental Wellbeing'), (2201, 'People At risk'), (2301, 'Priotiy Issues (Pop)'), (2302, 'Priotiy Issues (Hum)'), (2303, 'Priotiy Interventions (Pop)'), (2304, 'Priotiy Interventions (Hum)'), (2401, 'Government Local Authorities'), (2402, 'International Organisations'), (2403, 'Nation And Local Organisations'), (2404, 'Red Cross Red Crescent'), (2405, 'Humanitarian Coordination')])),
                ('category_3', models.PositiveSmallIntegerField(blank=True, choices=[(1001, 'Cross'), (1002, 'Food'), (1003, 'Wash'), (1004, 'Health'), (1005, 'Protection'), (1006, 'Education'), (1007, 'Livelihood'), (1008, 'Nutrition'), (1009, 'Agriculture'), (1010, 'Logistics'), (1011, 'Shelter'), (1012, 'Analytical Outputs')], null=True)),
                ('category_4', models.PositiveSmallIntegerField(blank=True, choices=[(3001, 'Water'), (3002, 'Sanitation'), (3003, 'Hygiene'), (3004, 'Waste Management'), (3005, 'Vector Control'), (4001, 'HEALTH CARE'), (4002, 'HEALTH STATUS'), (5001, 'DOCUMENTATION'), (5002, 'CIVIL AND POLITICAL RIGHTS'), (5003, 'PHYSICAL SAFETY AND SECURITY'), (5004, 'FREEDOM OF MOVEMENT'), (5005, 'LIBERTY'), (5006, 'CHILD PROTECTION'), (5007, 'SGBV'), (5008, 'HOUSING LAND AND PROPERTY'), (5009, 'JUSTICE AND RULE OF LAW'), (5010, 'MINES'), (5011, 'HUMAN TRAFFICKING'), (6001, 'LEARNING ENVIRONMENT'), (6002, 'FACILITIES AND AMENITIES'), (6003, 'TEACHER AND LEARNING'), (6004, 'TEACHERS AND EDUCATION PERSONNEL'), (7001, 'INCOME'), (7002, 'EXPENDITURES'), (7003, 'PRODUCTIVE ASSETS'), (7004, 'SKILLS AND QUALIFICATIONS'), (8001, 'NUTRITION GOODS AND SERVICES'), (8002, 'NUTRITION STATUS'), (12001, 'DWELLING ENVELOPPE'), (12002, 'INTERIOR DOMENSTIC LIFE')], null=True)),
                ('relevant', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
    ]
