# Generated by Django 4.2.5 on 2023-09-26 08:00

import apps.qbank.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import utils.common


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='QBChoiceCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='QBLeafGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Matrix 1D'), (2, 'Matrix 2D')])),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('category_1', models.PositiveSmallIntegerField(choices=[(101, 'Context'), (102, 'Event and shock'), (103, 'Displacement'), (104, 'Casualties'), (105, 'Information and communication'), (106, 'Humanitarian access'), (107, 'Introduction'), (108, 'Conclusion'), (201, 'Impact'), (202, 'Humanitarian condition'), (203, 'At Risk'), (204, 'Priority needs'), (205, 'Priority Interventions'), (206, 'Capacities and response')])),
                ('category_2', models.PositiveSmallIntegerField(choices=[(10001, 'Politics'), (10002, 'Economics'), (10003, 'Environment'), (10004, 'Socio-cultural'), (10005, 'Demographic'), (10006, 'Security and stability'), (10101, 'Type and characteristics'), (10102, 'Aggravating factors'), (10103, 'Mitigating factors'), (10104, 'Hazards & threats'), (10201, 'Displacement characteristics'), (10202, 'Pull factors'), (10203, 'Push factors'), (10204, 'Intentions'), (10205, 'Local integration'), (10301, 'Dead'), (10302, 'Injured'), (10303, 'Missing'), (10401, 'Communication sources and means'), (10402, 'Information challenges and barriers'), (10403, 'Knowledge and info gaps (Pop)'), (10404, 'Knowledge and info gaps (Hum)'), (10501, 'Population to relief'), (10502, 'Relief to population'), (10503, 'Physical constraints'), (10504, 'Security constraints'), (10505, 'People facing humanitarian access constraints/Humanitarian access gaps'), (10601, 'Introduction'), (10602, 'Questionnaire characteristics'), (10603, 'Enumerator characteristics'), (10604, 'Respondent characteristics'), (10605, 'Area characteristics'), (10606, 'Affected group characteristics'), (10701, 'Cross'), (20001, 'Drivers'), (20002, 'Impact on people'), (20003, 'Impact on systems, services and networks'), (20004, 'Number of people affected'), (20101, 'Living standards'), (20102, 'Coping mechanisms'), (20103, 'Physical and mental well being'), (20104, 'Number of people in need'), (20201, 'People at risk'), (20202, 'Number of people at risk'), (20301, 'Expressed by population'), (20302, 'Expressed by humanitarian staff'), (20501, 'Government and local authorities'), (20502, 'International organizations'), (20503, 'National and local organizations'), (20504, 'Red cross Red Crescent'), (20505, 'Humanitarian coordination'), (20506, 'People reached and response gaps')])),
                ('category_3', models.PositiveSmallIntegerField(blank=True, choices=[(1000, 'Cross'), (1001, 'Health'), (1002, 'WASH'), (1003, 'Shelter'), (1004, 'Food security'), (1005, 'Livelihoods'), (1006, 'Nutrition'), (1007, 'Education'), (1008, 'Protection'), (1009, 'Agriculture'), (1010, 'Logistic')], null=True)),
                ('category_4', models.PositiveSmallIntegerField(blank=True, choices=[(10001, 'Cross'), (10101, 'Health care'), (10102, 'Health status'), (10201, 'Water supply'), (10202, 'Excreta management /sanitation'), (10203, 'Solid waste management'), (10204, 'Hygiene facilities and products'), (10205, 'WASH in schools'), (10206, 'WASH in health care facilities'), (10207, 'Vector control'), (10301, 'Dwelling envelope'), (10302, 'Domestic living space'), (10303, 'Non-food household items'), (10304, 'Housing, Land and Property (HLP)'), (10305, 'Settlement'), (10401, 'Food'), (10402, 'Non Food Items'), (10501, 'Natural capital'), (10502, 'Human capital'), (10503, 'Social capital'), (10504, 'Physical capital'), (10505, 'Financial capital'), (10506, 'Occupation'), (10601, 'Nutrition status'), (10602, 'Nutrition services'), (10701, 'Provision'), (10702, 'Learning environment'), (10703, 'Teaching and learning'), (10704, 'Teachers and other education personnel'), (10705, 'Education policy'), (10801, 'Documentation'), (10802, 'Human, civil and political rights'), (10803, 'Justice and rule of law'), (10804, 'Physical safety and security'), (10805, 'Freedom of movement'), (10806, 'Child Protection'), (10807, 'Sexual and Gender-Based Violence'), (10809, 'Mines, UXOS and IEDs'), (10901, 'Production'), (10902, 'Agricultural inputs'), (10903, 'Agricultural infrastructure'), (10904, 'Natural resource management'), (11001, 'Transport'), (11002, 'Information and communication technologies (ICT)'), (11003, 'Energy')], null=True)),
                ('relevant', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('is_draft', models.BooleanField(default=True)),
                ('import_file', models.FileField(help_text='XLSForm', max_length=255, upload_to=apps.qbank.models.import_file_upload_to)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QBQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'High'), (2, 'Medium'), (3, 'Low')], null=True)),
                ('enumerator_skill', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Basic'), (2, 'Intermediate'), (3, 'Advanced')], null=True)),
                ('data_collection_method', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Direct observation'), (2, 'Focus group'), (3, '1-on-1 interviews'), (4, 'Open-ended survey'), (5, 'Closed-ended survey'), (6, 'Key Informant Interview'), (7, 'Automatic')], null=True)),
                ('required_duration', models.PositiveIntegerField(blank=True, help_text='In seconds', null=True)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Integer (i.e., whole number) input.'), (2, 'Decimal input.'), (3, 'Free text response.'), (4, 'Multiple choice question; only one answer can be selected.'), (5, 'Multiple choice question; multiple answers can be selected.'), (6, 'Rank question; order a list.'), (7, 'Range input (including rating)'), (10, 'Display a note on the screen, takes no input. Shorthand for type=text with readonly=true.'), (14, 'Date input.'), (15, 'Time input.'), (16, 'Accepts a date and a time input.'), (17, 'Take a picture or upload an image file.'), (18, 'Take an audio recording or upload an audio file.'), (20, 'Take a video recording or upload a video file.'), (21, 'Generic file input (txt, pdf, xls, xlsx, doc, docx, rtf, zip)'), (22, 'Scan a barcode, requires the barcode scanner app to be installed.'), (24, 'Acknowledge prompt that sets value to "OK" if selected.')])),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('name', models.CharField(max_length=255, validators=[utils.common.validate_xlsform_name])),
                ('label', models.TextField()),
                ('hint', models.TextField(blank=True)),
                ('default', models.TextField(blank=True)),
                ('guidance_hint', models.TextField(blank=True)),
                ('trigger', models.CharField(blank=True, max_length=255)),
                ('readonly', models.CharField(blank=True, max_length=255)),
                ('required', models.BooleanField(default=False)),
                ('required_message', models.CharField(blank=True, max_length=255)),
                ('relevant', models.CharField(blank=True, max_length=255)),
                ('constraint', models.CharField(blank=True, max_length=255)),
                ('constraint_message', models.CharField(blank=True, max_length=255)),
                ('appearance', models.CharField(blank=True, max_length=255)),
                ('calculation', models.CharField(blank=True, max_length=255)),
                ('parameters', models.CharField(blank=True, max_length=255)),
                ('choice_filter', models.CharField(blank=True, max_length=255)),
                ('image', models.CharField(blank=True, max_length=255)),
                ('video', models.CharField(blank=True, max_length=255)),
                ('is_or_other', models.BooleanField(default=False)),
                ('choice_collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='qbank.qbchoicecollection')),
                ('leaf_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='qbank.qbleafgroup')),
                ('qbank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='qbank.questionbank')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='qbleafgroup',
            name='qbank',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='qbank.questionbank'),
        ),
        migrations.AddField(
            model_name='qbchoicecollection',
            name='qbank',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='qbank.questionbank'),
        ),
        migrations.AlterUniqueTogether(
            name='qbleafgroup',
            unique_together={('qbank', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='qbchoicecollection',
            unique_together={('qbank', 'name')},
        ),
        migrations.CreateModel(
            name='QBChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='qbank.qbchoicecollection')),
            ],
            options={
                'unique_together': {('collection', 'name')},
            },
        ),
    ]
