# Generated by Django 4.2.5 on 2023-09-28 05:15

import apps.qbank.models
import django.core.validators
from django.db import migrations, models
import utils.common


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='QBChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='QBChoiceCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='QBLeafGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Matrix 1D'), (2, 'Matrix 2D')])),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('category_1', models.PositiveSmallIntegerField(choices=[(101, 'Context'), (102, 'Shocks and events'), (103, 'Displacement'), (104, 'Casualties'), (105, 'Information and communication'), (106, 'Humanitarian access'), (107, 'Introduction'), (108, 'Conclusion'), (109, 'Market'), (201, 'Impact'), (202, 'Humanitarian conditions'), (203, 'At Risk'), (204, 'Priorities and preferences'), (205, 'Response and capacities')])),
                ('category_2', models.PositiveSmallIntegerField(choices=[(10101, 'Introduction'), (10102, 'Politics'), (10103, 'Economics'), (10104, 'Environment'), (10105, 'Socio-cultural'), (10106, 'Demographics'), (10107, 'Security and stability'), (10201, 'Type and characteristics'), (10202, 'Aggravating factors'), (10203, 'Mitigating factors'), (10204, 'Threats and hazards'), (10301, 'Introduction people arriving'), (10302, 'Introduction people leaving'), (10304, 'Pull factors'), (10305, 'Push factors'), (10306, 'Intentions'), (10307, 'Local integration'), (10401, 'Cross'), (10402, 'Dead'), (10403, 'Injured'), (10404, 'Missing'), (10501, 'Communication sources and means'), (10502, 'Challenges and barriers'), (10503, 'Knowledge and information gaps (population)'), (10504, 'Knowledge and information gaps (humanitarians)'), (10601, 'Introduction humanitarian actors barriers'), (10602, 'Introduction people affected barriers'), (10603, 'Population to relief'), (10604, 'Relief to population'), (10605, 'Physical and security constraints'), (10606, 'People facing humanitarian access constraints/Humanitarian access gaps'), (10701, 'Questionnaire characteristics'), (10702, 'Enumerator characteristics'), (10703, 'Respondent characteristics'), (10704, 'Area characteristics'), (10705, 'Affected group characteristics'), (10901, 'Food'), (10902, 'Wash'), (10903, 'Shelter and domestic items'), (20101, 'Drivers'), (20102, 'Impact on people'), (20103, 'Impact on systems, services and networks'), (20104, 'Number of people affected'), (20201, 'Living standards'), (20202, 'Coping mechanisms'), (20203, 'Physical and mental well being'), (20204, 'Number of people in need'), (20301, 'People at risk'), (20302, 'Number of people at risk'), (20401, 'Priority needs'), (20402, 'Priority interventions'), (20501, 'Government and local authorities'), (20502, 'International organizations'), (20503, 'National and local organizations'), (20504, 'Red cross Red Crescent'), (20505, 'Humanitarian coordination'), (20506, 'People reached and response gaps')])),
                ('category_3', models.PositiveSmallIntegerField(blank=True, choices=[(1001, 'Inter sector'), (1002, 'Health'), (1003, 'WASH'), (1004, 'Shelter'), (1005, 'Food security'), (1006, 'Livelihoods'), (1007, 'Nutrition'), (1008, 'Education'), (1009, 'Protection'), (1010, 'Agriculture'), (1011, 'Logistics')], null=True)),
                ('category_4', models.PositiveSmallIntegerField(blank=True, choices=[(10101, 'Introduction'), (10102, 'Cross'), (10201, 'Health care'), (10202, 'Health status'), (10301, 'Water supply'), (10302, 'Sanitation'), (10303, 'Solid waste management'), (10304, 'Hygiene'), (10305, 'WASH in schools'), (10306, 'WASH in health care facilities'), (10307, 'Vector control'), (10401, 'Dwelling envelope'), (10402, 'Domestic living space'), (10403, 'Non-food household items'), (10404, 'Housing, land and property'), (10405, 'Settlement'), (10501, 'Food commodities'), (10502, 'Non Food Items'), (10601, 'Income'), (10602, 'Cash'), (10701, 'Nutrition status'), (10702, 'Nutrition services'), (10801, 'Provision'), (10802, 'Learning environment'), (10803, 'Teaching and learning'), (10804, 'Teachers and other education personnel'), (10805, 'Education policy'), (10901, 'Documentation'), (10902, 'Human, civil and political rights'), (10903, 'Justice and rule of law'), (10904, 'Physical safety and security'), (10905, 'Freedom of movement'), (10906, 'Child Protection'), (10907, 'Sexual and Gender-Based Violence'), (10908, 'Mines, UXOS and IEDs'), (11001, 'Production'), (11002, 'Agricultural inputs'), (11003, 'Agricultural infrastructure'), (11004, 'Natural resource management'), (11101, 'Transport'), (11102, 'Information and communication technologies'), (11103, 'Energy')], null=True)),
                ('relevant', models.CharField(blank=True, max_length=255)),
                ('hide_in_framework', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='QBQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority_level', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'High'), (2, 'Medium'), (3, 'Low')], null=True)),
                ('enumerator_skill', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Basic'), (2, 'Intermediate'), (3, 'Advanced')], null=True)),
                ('data_collection_method', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Key informant interview'), (2, 'Direct observation'), (3, 'Automatic observation')], null=True)),
                ('required_duration', models.FloatField(blank=True, help_text='In minutes', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Integer (i.e., whole number) input.'), (2, 'Decimal input.'), (3, 'Free text response.'), (4, 'Multiple choice question; only one answer can be selected.'), (5, 'Multiple choice question; multiple answers can be selected.'), (6, 'Rank question; order a list.'), (7, 'Range input (including rating)'), (10, 'Display a note on the screen, takes no input. Shorthand for type=text with readonly=true.'), (14, 'Date input.'), (15, 'Time input.'), (16, 'Accepts a date and a time input.'), (17, 'Take a picture or upload an image file.'), (18, 'Take an audio recording or upload an audio file.'), (20, 'Take a video recording or upload a video file.'), (21, 'Generic file input (txt, pdf, xls, xlsx, doc, docx, rtf, zip)'), (22, 'Scan a barcode, requires the barcode scanner app to be installed.'), (24, 'Acknowledge prompt that sets value to "OK" if selected.')])),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('name', models.CharField(max_length=255, validators=[utils.common.validate_xlsform_name])),
                ('label', models.TextField()),
                ('hint', models.TextField(blank=True)),
                ('default', models.TextField(blank=True)),
                ('guidance_hint', models.TextField(blank=True)),
                ('trigger', models.CharField(blank=True, max_length=255)),
                ('readonly', models.CharField(blank=True, max_length=255)),
                ('required', models.BooleanField(default=False)),
                ('required_message', models.CharField(blank=True, max_length=255)),
                ('relevant', models.CharField(blank=True, max_length=255)),
                ('constraint', models.CharField(blank=True, max_length=255)),
                ('constraint_message', models.CharField(blank=True, max_length=255)),
                ('appearance', models.CharField(blank=True, max_length=255)),
                ('calculation', models.CharField(blank=True, max_length=255)),
                ('parameters', models.CharField(blank=True, max_length=255)),
                ('choice_filter', models.CharField(blank=True, max_length=255)),
                ('image', models.CharField(blank=True, max_length=255)),
                ('video', models.CharField(blank=True, max_length=255)),
                ('is_or_other', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Started'), (3, 'Success'), (4, 'Failure')], default=1)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=False)),
                ('import_file', models.FileField(help_text='XLSForm', max_length=255, upload_to=apps.qbank.models.import_file_upload_to)),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
    ]
