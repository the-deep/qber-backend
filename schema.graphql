"""A generic type to return error messages"""
scalar CustomErrorType

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  public: PublicMutation!
  private: PrivateMutation!
}

type MutationEmptyResponseType {
  ok: Boolean!
  errors: CustomErrorType
}

enum OptEmailNotificationTypeEnum {
  NEWS_AND_OFFERS
}

input PasswordChangeInput {
  oldPassword: String!
  newPassword: String!
}

input PasswordResetConfirmInput {
  captcha: String!
  uuid: String!
  token: String!
  newPassword: String!
}

input PasswordResetTriggerInput {
  captcha: String!
  email: String!
}

type PrivateMutation {
  changeUserPassword(data: PasswordChangeInput!): MutationEmptyResponseType!
  updateMe(data: UserMeInput!): UserMeTypeMutationResponseType!
  id: ID!
}

type PrivateQuery {
  user: UserType!
  id: ID!
}

type PublicMutation {
  register(data: RegisterInput!): UserMeTypeMutationResponseType!
  login(data: LoginInput!): UserMeTypeMutationResponseType!
  logout: MutationEmptyResponseType!
  passwordResetTrigger(data: PasswordResetTriggerInput!): MutationEmptyResponseType!
  passwordResetConfirm(data: PasswordResetConfirmInput!): MutationEmptyResponseType!
  id: ID!
}

type PublicQuery {
  me: UserMeType
  id: ID!
}

type Query {
  public: PublicQuery!
  private: PrivateQuery!
}

input RegisterInput {
  email: String!
  captcha: String!
  firstName: String = ""
  lastName: String = ""
}

input UserMeInput {
  firstName: String = ""
  lastName: String = ""
  emailOptOuts: [OptEmailNotificationTypeEnum!] = null
}

type UserMeType {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  emailOptOuts: [OptEmailNotificationTypeEnum!]!
}

type UserMeTypeMutationResponseType {
  ok: Boolean!
  errors: CustomErrorType
  result: UserMeType
}

type UserType {
  id: ID!
  firstName: String!
  lastName: String!
}