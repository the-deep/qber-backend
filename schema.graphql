"""A generic type to return error messages"""
scalar CustomErrorType

"""Date with time (isoformat)"""
scalar DateTime

input DatetimeFilterLookup {
  exact: DateTime
  iExact: DateTime
  contains: DateTime
  iContains: DateTime
  inList: [DateTime!]
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  startsWith: DateTime
  iStartsWith: DateTime
  endsWith: DateTime
  iEndsWith: DateTime
  range: [DateTime!]
  isNull: Boolean
  regex: String
  iRegex: String
}

input DjangoModelFilterInput {
  pk: ID!
}

type FileFieldType {
  name: String!
  url: String!
}

input IDFilterLookup {
  exact: ID
  iExact: ID
  contains: ID
  iContains: ID
  inList: [ID!]
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  startsWith: ID
  iStartsWith: ID
  endsWith: ID
  iEndsWith: ID
  range: [ID!]
  isNull: Boolean
  regex: String
  iRegex: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  public: PublicMutation!
  private: PrivateMutation!
}

type MutationEmptyResponseType {
  ok: Boolean!
  errors: CustomErrorType
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

enum OptEmailNotificationTypeEnum {
  NEWS_AND_OFFERS
}

enum Ordering {
  ASC
  DESC
}

input PasswordChangeInput {
  oldPassword: String!
  newPassword: String!
}

input PasswordResetConfirmInput {
  captcha: String!
  uuid: String!
  token: String!
  newPassword: String!
}

input PasswordResetTriggerInput {
  captcha: String!
  email: String!
}

type PrivateMutation {
  changeUserPassword(data: PasswordChangeInput!): MutationEmptyResponseType!
  updateMe(data: UserMeInput!): UserMeTypeMutationResponseType!
  createProject(data: ProjectCreateInput!): ProjectTypeMutationResponseType!
  projectScope(pk: ID!): ProjectScopeMutation
  id: ID!
}

type PrivateQuery {
  user: UserType!
  users(filters: UserFilter, order: UserOrder, pagination: OffsetPaginationInput): UserTypeCountList!
  projects(filters: ProjectFilter, order: ProjectOrder, pagination: OffsetPaginationInput): ProjectTypeCountList!
  projectScope(pk: ID!): ProjectScopeType
  id: ID!
}

input ProjectCreateInput {
  title: String!
}

input ProjectFilter {
  id: IDFilterLookup
  search: String
}

input ProjectMembershipFilter {
  id: IDFilterLookup
  search: String
}

input ProjectMembershipOrder {
  id: Ordering
  joinedAt: Ordering
}

enum ProjectMembershipRoleTypeEnum {
  ADMIN
  MEMBER
  VIEWER
}

type ProjectMembershipType {
  id: ID!
  role: ProjectMembershipRoleTypeEnum!
  joinedAt: DateTime!
  memberId: ID!
  addedById: ID
  addedBy: UserType
  clientId: ID!
  member: UserType!
}

type ProjectMembershipTypeBulkMutationResponseType {
  errors: [CustomErrorType!]
  results: [ProjectMembershipType!]
  deleted: [ProjectMembershipType!]
}

type ProjectMembershipTypeCountList {
  limit: Int!
  offset: Int!
  count: Int!
  items: [ProjectMembershipType!]!
}

input ProjectMembershipUpdateInput {
  id: ID
  clientId: ID
  member: ID
  role: ProjectMembershipRoleTypeEnum
}

input ProjectOrder {
  id: Ordering
  createdAt: Ordering
}

enum ProjectPermissionTypeEnum {
  UPDATE_PROJECT
  UPDATE_MEMBERSHIPS
  VIEW_QUESTIONNAIRE
  EXPORT_QUESTIONNAIRE
  CREATE_QUESTIONNAIRE
  UPDATE_QUESTIONNAIRE
  DELETE_QUESTIONNAIRE
  VIEW_QUESTION
  CREATE_QUESTION
  UPDATE_QUESTION
  DELETE_QUESTION
  VIEW_QUESTION_GROUP
  CREATE_QUESTION_GROUP
  UPDATE_QUESTION_GROUP
  DELETE_QUESTION_GROUP
  VIEW_QUESTION_CHOICE
  CREATE_QUESTION_CHOICE
  UPDATE_QUESTION_CHOICE
  DELETE_QUESTION_CHOICE
}

type ProjectScopeMutation {
  createQuestionnaire(data: QuestionnaireCreateInput!): QuestionnaireTypeMutationResponseType!
  updateQuestionnaire(id: ID!, data: QuestionnaireUpdateInput!): QuestionnaireTypeMutationResponseType!
  deleteQuestionnaire(id: ID!): QuestionnaireTypeMutationResponseType!
  createQuestion(data: QuestionCreateInput!): QuestionTypeMutationResponseType!
  updateQuestion(id: ID!, data: QuestionUpdateInput!): QuestionTypeMutationResponseType!
  deleteQuestion(id: ID!): QuestionTypeMutationResponseType!
  bulkUpdateQuestionnaireQuestionGroupsLeafOrder(questionnaireId: ID!, data: [QuestionLeafGroupOrderInputType!]!): QuestionLeafGroupTypeBulkBasicMutationResponseType!
  updateQuestionGroupsLeafVisibility(questionnaireId: ID!, ids: [ID!]!, visibility: VisibilityActionEnum!): QuestionLeafGroupTypeBulkBasicMutationResponseType!
  bulkUpdateQuestionsOrder(questionnaireId: ID!, leafGroupId: ID!, data: [QuestionOrderInputType!]!): QuestionTypeBulkBasicMutationResponseType!
  updateQuestionsVisibility(questionnaireId: ID!, ids: [ID!]!, visibility: VisibilityActionEnum!): QuestionTypeBulkBasicMutationResponseType!
  createQuestionChoiceCollection(data: QuestionChoiceCollectionCreateInput!): QuestionChoiceCollectionTypeMutationResponseType!
  updateQuestionChoiceCollection(id: ID!, data: QuestionChoiceCollectionUpdateInput!): QuestionChoiceCollectionTypeMutationResponseType!
  deleteQuestionChoiceCollection(id: ID!): QuestionChoiceCollectionTypeMutationResponseType!
  createQuestionnaireExport(data: QuestionnaireExportCreateInput!): QuestionnaireExportTypeMutationResponseType!
  deleteQuestionnaireExport(id: ID!): QuestionnaireExportTypeMutationResponseType!
  id: ID!
  updateProject(data: ProjectUpdateInput!): ProjectTypeMutationResponseType!
  leaveProject(confirmPassword: String!): MutationEmptyResponseType!
  updateMemberships(items: [ProjectMembershipUpdateInput!] = [], deleteIds: [ID!] = []): ProjectMembershipTypeBulkMutationResponseType!
}

type ProjectScopeType {
  questionnaires(filters: QuestionnaireFilter, order: QuestionnaireOrder, pagination: OffsetPaginationInput): QuestionnaireTypeCountList!
  choiceCollections(filters: QuestionChoiceCollectionFilter, order: QuestionChoiceCollectionOrder, pagination: OffsetPaginationInput): QuestionChoiceCollectionTypeCountList!
  questions(filters: QuestionFilter, order: QuestionOrder, pagination: OffsetPaginationInput): QuestionTypeCountList!
  questionnaire(pk: ID!): QuestionnaireType
  leafGroup(pk: ID!): QuestionLeafGroupType
  choiceCollection(pk: ID!): QuestionChoiceCollectionType
  question(pk: ID!): QuestionType
  questionnaireExports(filters: QuestionnaireExportFilter, order: QuestionnaireExportOrder, pagination: OffsetPaginationInput): QuestionnaireExportTypeCountList!
  questionnaireExport(pk: ID!): QuestionnaireExportType
  id: ID!
  project: ProjectType!
}

type ProjectType {
  createdAt: DateTime!
  modifiedAt: DateTime!
  id: ID!
  title: String!
  members(filters: ProjectMembershipFilter, order: ProjectMembershipOrder, pagination: OffsetPaginationInput): ProjectMembershipTypeCountList!
  allowedPermissions: [ProjectPermissionTypeEnum!]!
  createdBy: UserType!
  currentUserRole: ProjectMembershipRoleTypeEnum
  modifiedBy: UserType!
}

type ProjectTypeCountList {
  limit: Int!
  offset: Int!
  count: Int!
  items: [ProjectType!]!
}

type ProjectTypeMutationResponseType {
  ok: Boolean!
  errors: CustomErrorType
  result: ProjectType
}

input ProjectUpdateInput {
  title: String
}

type PublicMutation {
  register(data: RegisterInput!): UserMeTypeMutationResponseType!
  login(data: LoginInput!): UserMeTypeMutationResponseType!
  logout: MutationEmptyResponseType!
  passwordResetTrigger(data: PasswordResetTriggerInput!): MutationEmptyResponseType!
  passwordResetConfirm(data: PasswordResetConfirmInput!): MutationEmptyResponseType!
  id: ID!
}

type PublicQuery {
  me: UserMeType
  id: ID!
}

type Query {
  public: PublicQuery!
  private: PrivateQuery!
}

input QuestionChoiceCollectionCreateInput {
  questionnaire: ID!
  name: String!
  label: String!
  choices: [QuestionChoiceNestInputType!]!
}

input QuestionChoiceCollectionFilter {
  id: IDFilterLookup
  questionnaire: DjangoModelFilterInput
  name: StrFilterLookup
  label: StrFilterLookup
}

input QuestionChoiceCollectionOrder {
  id: Ordering
  createdAt: Ordering
}

type QuestionChoiceCollectionType {
  createdAt: DateTime!
  modifiedAt: DateTime!
  id: ID!
  name: String!
  label: String!
  choices: [QuestionChoiceType!]!
  createdBy: UserType!
  modifiedBy: UserType!
  questionnaireId: ID!
}

type QuestionChoiceCollectionTypeCountList {
  limit: Int!
  offset: Int!
  count: Int!
  items: [QuestionChoiceCollectionType!]!
}

type QuestionChoiceCollectionTypeMutationResponseType {
  ok: Boolean!
  errors: CustomErrorType
  result: QuestionChoiceCollectionType
}

input QuestionChoiceCollectionUpdateInput {
  questionnaire: ID
  name: String
  label: String
  choices: [QuestionChoiceNestUpdateInputType!]
}

input QuestionChoiceNestInputType {
  name: String!
  label: String!
  id: ID
  clientId: ID
}

input QuestionChoiceNestUpdateInputType {
  id: ID
  clientId: ID
  name: String
  label: String
}

type QuestionChoiceType {
  id: ID!
  name: String!
  label: String!
  clientId: ID!
  collectionId: ID!
}

input QuestionCreateInput {
  questionnaire: ID!
  leafGroup: ID!
  type: QuestionTypeEnum!
  name: String!
  label: String!
  hint: String
  choiceCollection: ID
  default: String
  guidanceHint: String
  trigger: String
  readonly: String
  required: Boolean
  requiredMessage: String
  relevant: String
  constraint: String
  appearance: String
  calculation: String
  parameters: String
  choiceFilter: String
  image: String
  video: String
  isOrOther: Boolean
}

input QuestionFilter {
  id: IDFilterLookup
  questionnaire: DjangoModelFilterInput
  choiceCollection: DjangoModelFilterInput
  type: QuestionTypeEnum
  name: StrFilterLookup
  label: StrFilterLookup
  leafGroup: DjangoModelFilterInput
  isHidden: Boolean
}

enum QuestionLeafGroupCategory1TypeEnum {
  CONTEXT
  EVENT_SHOCK
  DISPLACEMENT
  CASUALTIES
  INFORMATION_AND_COMMUNICATION
  HUMANITARIAN_ACCESS
  IMPACT
  HUMANITARIAN_CONDITIONS
  AT_RISK
  PRIORITIES
  CAPACITIES_RESPONSE
}

enum QuestionLeafGroupCategory2TypeEnum {
  POLITICS
  DEMOGRAPHY
  SOCIO_CULTURAL
  ENVIRONMENT
  SECURITY_AND_STABILITY
  ECONOMICS
  EVENT_SHOCK_CHARACTERISTICS
  DRIVERS_AND_AGGRAVATING_FACTORS
  MITIGATING_FACTORS
  HAZARDS_AND_THREATS
  DISPLACEMENT_CHARACTERISTICS
  PUSH_FACTORS
  PULL_FACTORS
  INTENTIONS
  LOCAL_INTEGRATION
  DEAD
  INJURED
  MISSING
  SOURCE_AND_MEANS
  CHALLENDGES_AND_BARRIERS
  KNOWLEDGE_AND_INFO_GAPS_HUMANITARIAN
  KNOWLEDGE_AND_INFO_GAPS_POPULATION
  POPULATION_TO_RELIEF
  RELIEF_TO_POPULATION
  PHYSICAL_AND_SECURITY
  NUMBER_OF_PEOPLE_FACING_HUMANITARIN_ACCESS_CONSTRAINTS
  DRIVERS
  IMPACT_ON_PEOPLE
  IMPACT_ON_SYSTEMS_SERVICES_NETWORK
  LIVING_STANDARDS
  COPING_MECHANISMS
  PHYSICAL_AND_MENTAL_WELLBEING
  PEOPLE_AT_RISK
  PRIORITY_ISSUES_POP
  PRIORITY_ISSUES_HUM
  PRIORITY_INTERVENTIONS_POP
  PRIORITY_INTERVENTIONS_HUM
  GOVERNMENT_LOCAL_AUTHORITIES
  INTERNATIONAL_ORGANISATIONS
  NATION_AND_LOCAL_ORGANISATIONS
  RED_CROSS_RED_CRESCENT
  HUMANITARIAN_COORDINATION
}

enum QuestionLeafGroupCategory3TypeEnum {
  CROSS
  FOOD
  WASH
  HEALTH
  PROTECTION
  EDUCATION
  LIVELIHOOD
  NUTRITION
  AGRICULTURE
  LOGISTICS
  SHELTER
  ANALYTICAL_OUTPUTS
}

enum QuestionLeafGroupCategory4TypeEnum {
  WATER
  SANITATION
  HYGIENE
  WASTE_MANAGEMENT
  VECTOR_CONTROL
  HEALTH_CARE
  HEALTH_STATUS
  DOCUMENTATION
  CIVIL_AND_POLITICAL_RIGHTS
  PHYSICAL_SAFETY_AND_SECURITY
  FREEDOM_OF_MOVEMENT
  LIBERTY
  CHILD_PROTECTION
  SGBV
  HOUSING_LAND_AND_PROPERTY
  JUSTICE_AND_RULE_OF_LAW
  MINES
  HUMAN_TRAFFICKING
  LEARNING_ENVIRONMENT
  FACILITIES_AND_AMENITIES
  TEACHER_AND_LEARNING
  TEACHERS_AND_EDUCATION_PERSONNEL
  INCOME
  EXPENDITURES
  PRODUCTIVE_ASSETS
  SKILLS_AND_QUALIFICATIONS
  NUTRITION_GOODS_AND_SERVICES
  NUTRITION_STATUS
  DWELLING_ENVELOPPE
  INTERIOR_DOMENSTIC_LIFE
}

input QuestionLeafGroupOrderInputType {
  id: ID!
  order: Int!
}

type QuestionLeafGroupType {
  createdAt: DateTime!
  modifiedAt: DateTime!
  id: ID!
  name: String!
  order: Int!
  isHidden: Boolean!
  relevant: String!
  category1: QuestionLeafGroupCategory1TypeEnum!
  category1Display: String!
  category2: QuestionLeafGroupCategory2TypeEnum!
  category2Display: String!
  category3: QuestionLeafGroupCategory3TypeEnum
  category3Display: String
  category4: QuestionLeafGroupCategory4TypeEnum
  category4Display: String
  createdBy: UserType!
  modifiedBy: UserType!
  questionnaireId: ID!
  type: QuestionLeafGroupTypeEnum!
  typeDisplay: String!
}

type QuestionLeafGroupTypeBulkBasicMutationResponseType {
  errors: [CustomErrorType!]
  results: [QuestionLeafGroupType!]
}

enum QuestionLeafGroupTypeEnum {
  MATRIX_1D
  MATRIX_2D
}

input QuestionOrder {
  id: Ordering
  createdAt: Ordering
  order: Ordering
}

input QuestionOrderInputType {
  id: ID!
  order: Int!
}

type QuestionType {
  createdAt: DateTime!
  modifiedAt: DateTime!
  id: ID!
  name: String!
  label: String!
  hint: String!
  order: Int!
  isHidden: Boolean!
  default: String!
  guidanceHint: String!
  trigger: String!
  readonly: String!
  required: Boolean!
  requiredMessage: String!
  relevant: String!
  constraint: String!
  appearance: String!
  calculation: String!
  parameters: String!
  choiceFilter: String!
  image: String!
  video: String!
  isOrOther: Boolean!
  choiceCollection: QuestionChoiceCollectionType
  createdBy: UserType!
  leafGroupId: ID
  modifiedBy: UserType!
  questionnaireId: ID!
  type: QuestionTypeEnum!
  typeDisplay: String!
}

type QuestionTypeBulkBasicMutationResponseType {
  errors: [CustomErrorType!]
  results: [QuestionType!]
}

type QuestionTypeCountList {
  limit: Int!
  offset: Int!
  count: Int!
  items: [QuestionType!]!
}

enum QuestionTypeEnum {
  INTEGER
  DECIMAL
  TEXT
  SELECT_ONE
  SELECT_MULTIPLE
  RANK
  RANGE
  NOTE
  DATE
  TIME
  DATETIME
  IMAGE
  AUDIO
  VIDEO
  FILE
  BARCODE
  ACKNOWLEDGE
}

type QuestionTypeMutationResponseType {
  ok: Boolean!
  errors: CustomErrorType
  result: QuestionType
}

input QuestionUpdateInput {
  questionnaire: ID
  leafGroup: ID
  type: QuestionTypeEnum
  name: String
  label: String
  hint: String
  choiceCollection: ID
  default: String
  guidanceHint: String
  trigger: String
  readonly: String
  required: Boolean
  requiredMessage: String
  relevant: String
  constraint: String
  appearance: String
  calculation: String
  parameters: String
  choiceFilter: String
  image: String
  video: String
  isOrOther: Boolean
}

input QuestionnaireCreateInput {
  title: String!
  priorityLevel: QuestionnairePriorityLevelTypeEnum
  enumeratorSkill: QuestionnaireEnumeratorSkillTypeEnum
  dataCollectionMethod: QuestionnaireDataCollectionMethodTypeEnum
  requiredDuration: Int
}

enum QuestionnaireDataCollectionMethodTypeEnum {
  DIRECT
  FOCUS_GROUP
  ONE_ON_ONE_INTERVIEW
  OPEN_ENDED_SURVEY
  CLOSED_ENDED_SURVEY
  KEY_INFORMANT_INTERVIEW
}

enum QuestionnaireEnumeratorSkillTypeEnum {
  BASIC
  MEDIUM
  ADVANCED
}

input QuestionnaireExportCreateInput {
  type: QuestionnaireExportTypeEnum!
  questionnaire: ID!
}

input QuestionnaireExportFilter {
  id: IDFilterLookup
  questionnaire: DjangoModelFilterInput
  exportedAt: DatetimeFilterLookup
  type: QuestionnaireExportTypeEnum
  status: QuestionnaireExportStatusEnum
}

input QuestionnaireExportOrder {
  id: Ordering
  exportedAt: Ordering
}

enum QuestionnaireExportStatusEnum {
  PENDING
  STARTED
  SUCCESS
  FAILURE
  CANCELED
}

type QuestionnaireExportType {
  id: ID!
  exportedAt: DateTime!
  startedAt: DateTime
  endedAt: DateTime
  exportedBy: UserType!
  file: FileFieldType
  questionnaireId: ID!
  status: QuestionnaireExportStatusEnum!
  statusDisplay: String!
  type: QuestionnaireExportTypeEnum!
  typeDisplay: String!
}

type QuestionnaireExportTypeCountList {
  limit: Int!
  offset: Int!
  count: Int!
  items: [QuestionnaireExportType!]!
}

enum QuestionnaireExportTypeEnum {
  XLSFORM
}

type QuestionnaireExportTypeMutationResponseType {
  ok: Boolean!
  errors: CustomErrorType
  result: QuestionnaireExportType
}

input QuestionnaireFilter {
  id: IDFilterLookup
  project: DjangoModelFilterInput
  title: StrFilterLookup
}

input QuestionnaireOrder {
  id: Ordering
  createdAt: Ordering
}

enum QuestionnairePriorityLevelTypeEnum {
  HIGH
  MEDIUM
  LOW
}

type QuestionnaireType {
  createdAt: DateTime!
  modifiedAt: DateTime!
  id: ID!
  title: String!
  requiredDuration: Int
  createdBy: UserType!
  dataCollectionMethod: QuestionnaireDataCollectionMethodTypeEnum
  dataCollectionMethodDisplay: String
  enumeratorSkill: QuestionnaireEnumeratorSkillTypeEnum
  enumeratorSkillDisplay: String
  leafGroups: [QuestionLeafGroupType!]!
  modifiedBy: UserType!
  priorityLevel: QuestionnairePriorityLevelTypeEnum
  priorityLevelDisplay: String
  projectId: ID!
}

type QuestionnaireTypeCountList {
  limit: Int!
  offset: Int!
  count: Int!
  items: [QuestionnaireType!]!
}

type QuestionnaireTypeMutationResponseType {
  ok: Boolean!
  errors: CustomErrorType
  result: QuestionnaireType
}

input QuestionnaireUpdateInput {
  title: String
  priorityLevel: QuestionnairePriorityLevelTypeEnum
  enumeratorSkill: QuestionnaireEnumeratorSkillTypeEnum
  dataCollectionMethod: QuestionnaireDataCollectionMethodTypeEnum
  requiredDuration: Int
}

input RegisterInput {
  email: String!
  captcha: String!
  firstName: String
  lastName: String
}

input StrFilterLookup {
  exact: String
  iExact: String
  contains: String
  iContains: String
  inList: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  iStartsWith: String
  endsWith: String
  iEndsWith: String
  range: [String!]
  isNull: Boolean
  regex: String
  iRegex: String
}

input UserFilter {
  id: IDFilterLookup
  search: String
  membersExcludeProject: ID
  excludeMe: Boolean = false
}

input UserMeInput {
  firstName: String
  lastName: String
  emailOptOuts: [OptEmailNotificationTypeEnum!]
}

type UserMeType {
  id: ID!
  firstName: String!
  lastName: String!
  displayName: String!
  email: String!
  emailOptOuts: [OptEmailNotificationTypeEnum!]!
  emailOptOutsDisplay: [String!]!
}

type UserMeTypeMutationResponseType {
  ok: Boolean!
  errors: CustomErrorType
  result: UserMeType
}

input UserOrder {
  id: Ordering
}

type UserType {
  id: ID!
  firstName: String!
  lastName: String!
  displayName: String!
}

type UserTypeCountList {
  limit: Int!
  offset: Int!
  count: Int!
  items: [UserType!]!
}

enum VisibilityActionEnum {
  SHOW
  HIDE
}